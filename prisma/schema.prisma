generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  ADMIN
  MEMBER
  ORDER_CREATOR
}

enum ServiceType {
  SERVICE_TASK
  ASKING_SERVICE
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum TaskStatus {
  NOT_ASSIGNED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AskingStageType {
  ASKED
  SHARED
  VERIFIED
  INFORMED_TEAM
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  ASSIGN
  REASSIGN
  STATUS_CHANGE
  COMPLETE
}

// ============================================
// USER & AUTHENTICATION
// ============================================

model User {
  id           String    @id @db.VarChar(255) // Supabase user IDs (UUID format)
  email        String    @unique @db.VarChar(255)
  displayName  String?   @map("display_name") @db.VarChar(255)
  firstName    String?   @map("first_name") @db.VarChar(100)
  lastName     String?   @map("last_name") @db.VarChar(100)
  phone        String?   @db.VarChar(50)
  avatar       String?   @db.VarChar(500)
  employeeId   String?   @unique @map("employee_id") @db.VarChar(50)
  role         UserRole  @default(MEMBER)
  isActive     Boolean   @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at") @db.Timestamptz(6)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  metadata     Json?

  // Relations
  teamMemberships  TeamMember[]
  leadingTeams     Team[]         @relation("TeamLeader")
  assignedTasks    Task[]         @relation("TaskAssignedTo")
  createdOrders    Order[]        @relation("OrderCreatedBy")
  createdTasks     Task[]         @relation("TaskCreatedBy")
  createdTeams     Team[]         @relation("TeamCreatedBy")
  createdServices  Service[]      @relation("ServiceCreatedBy")
  createdOrderTypes OrderType[]   @relation("OrderTypeCreatedBy")
  askingTasks      AskingTask[]   @relation("AskingTaskAssignedTo")
  auditLogs        AuditLog[]
  
  // Asking Task Stage Relations
  initialConfirmationUpdates AskingTaskStage[] @relation("InitialConfirmationUser")
  updateRequestUpdates       AskingTaskStage[] @relation("UpdateRequestUser")

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([employeeId])
  @@index([lastLoginAt])
  @@map("users")
}

// ============================================
// TEAM MANAGEMENT
// ============================================

model Team {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(255)
  slug        String   @unique @db.VarChar(255)
  description String?  @db.Text
  leaderId    String   @map("leader_id") @db.VarChar(255)
  isActive    Boolean  @default(true) @map("is_active")
  createdById String?  @map("created_by") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  metadata    Json?

  // Relations
  leader       User         @relation("TeamLeader", fields: [leaderId], references: [id])
  createdBy    User?        @relation("TeamCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  members      TeamMember[]
  services     Service[]
  tasks        Task[]
  askingTasks  AskingTask[]

  @@index([leaderId])
  @@index([createdById])
  @@index([slug])
  @@index([isActive])
  @@map("teams")
}

model TeamMember {
  id        String    @id @default(cuid())
  teamId    String    @map("team_id")
  userId    String    @map("user_id") @db.VarChar(255)
  isActive  Boolean   @default(true) @map("is_active")
  joinedAt  DateTime  @default(now()) @map("joined_at") @db.Timestamptz(6)
  leftAt    DateTime? @map("left_at") @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId, isActive])
  @@index([userId, isActive])
  @@index([joinedAt])
  @@map("team_members")
}

// ============================================
// SERVICE MANAGEMENT
// ============================================

model Service {
  id             String      @id @default(cuid())
  name           String      @unique @db.VarChar(255)
  slug           String      @unique @db.VarChar(255)
  type           ServiceType
  description    String?     @db.Text
  teamId         String      @map("team_id")
  timeLimit      Int?        @map("time_limit") // in hours
  isMandatory    Boolean     @default(true) @map("is_mandatory")
  hasTaskCount   Boolean     @default(false) @map("has_task_count")
  taskCount      Int?        @map("task_count")
  isActive       Boolean     @default(true) @map("is_active")
  createdById    String?     @map("created_by") @db.VarChar(255)
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  metadata       Json?

  // Relations
  team              Team                @relation(fields: [teamId], references: [id])
  createdBy         User?               @relation("ServiceCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  orderTypeServices OrderTypeService[]
  askingDetails     AskingDetail?
  orderServices     OrderService[]
  tasks             Task[]
  askingTasks       AskingTask[]

  @@index([type, isActive])
  @@index([teamId, isActive])
  @@index([createdById])
  @@index([slug])
  @@map("services")
}

model AskingDetail {
  id        String   @id @default(cuid())
  serviceId String   @unique @map("service_id")
  detail    String?  @db.Text // Extra detail structure for asking services
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  service Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  stages  AskingStage[]

  @@map("asking_details")
}

model AskingStage {
  id                String          @id @default(cuid())
  askingDetailId    String          @map("asking_detail_id")
  stage             AskingStageType
  hasConfirmation   Boolean         @default(false) @map("has_confirmation")
  hasUpdateRequest  Boolean         @default(false) @map("has_update_request")
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  askingDetail AskingDetail @relation(fields: [askingDetailId], references: [id], onDelete: Cascade)

  @@unique([askingDetailId, stage])
  @@map("asking_stages")
}

// ============================================
// ORDER TYPE & ORDER MANAGEMENT
// ============================================

model OrderType {
  id            String   @id @default(cuid())
  name          String   @unique @db.VarChar(255)
  slug          String   @unique @db.VarChar(255)
  description   String?  @db.Text
  timeLimitDays Int      @map("time_limit_days") // Default time limit in days
  isActive      Boolean  @default(true) @map("is_active")
  isDefault     Boolean  @default(false) @map("is_default")
  createdById   String?  @map("created_by") @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  metadata      Json?

  // Relations
  createdBy User?              @relation("OrderTypeCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  services  OrderTypeService[]
  orders    Order[]

  @@index([isActive, isDefault])
  @@index([createdById])
  @@index([slug])
  @@map("order_types")
}

model OrderTypeService {
  id          String   @id @default(cuid())
  orderTypeId String   @map("order_type_id")
  serviceId   String   @map("service_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  orderType OrderType @relation(fields: [orderTypeId], references: [id], onDelete: Cascade)
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([orderTypeId, serviceId])
  @@index([orderTypeId])
  @@index([serviceId])
  @@map("order_type_services")
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique @map("order_number") @db.VarChar(50)
  orderTypeId   String      @map("order_type_id")
  customerName  String      @map("customer_name") @db.VarChar(255)
  customerEmail String      @map("customer_email") @db.VarChar(255)
  customerPhone String      @map("customer_phone") @db.VarChar(50)
  amount        Decimal     @db.Decimal(12, 2)
  orderDate     DateTime    @map("order_date") @default(now()) @db.Timestamptz(6)
  deliveryDate  DateTime    @map("delivery_date") @db.Timestamptz(6)
  deliveryTime  String?     @map("delivery_time") @db.VarChar(50)
  notes         String?     @db.Text
  folderLink    String?     @map("folder_link") @db.Text
  status        OrderStatus @default(PENDING)
  createdById   String?     @map("created_by") @db.VarChar(255)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  completedAt   DateTime?   @map("completed_at") @db.Timestamptz(6)
  metadata      Json?

  // Relations
  orderType    OrderType      @relation(fields: [orderTypeId], references: [id])
  createdBy    User?          @relation("OrderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  services     OrderService[]
  tasks        Task[]
  askingTasks  AskingTask[]

  @@index([status])
  @@index([orderTypeId])
  @@index([createdById])
  @@index([orderNumber])
  @@index([orderDate])
  @@index([deliveryDate])
  @@index([completedAt])
  @@index([customerEmail])
  @@index([createdAt(sort: Desc)])
  @@map("orders")
}

model OrderService {
  id        String   @id @default(cuid())
  orderId   String   @map("order_id")
  serviceId String   @map("service_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([orderId, serviceId])
  @@index([orderId])
  @@index([serviceId])
  @@map("order_services")
}

// ============================================
// TASK MANAGEMENT
// ============================================

model Task {
  id          String       @id @default(cuid())
  orderId     String       @map("order_id")
  serviceId   String?      @map("service_id")
  teamId      String       @map("team_id")
  title       String       @db.VarChar(500)
  description String?      @db.Text
  notes       String?      @db.Text
  assignedTo  String?      @map("assigned_to") @db.VarChar(255)
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(NOT_ASSIGNED)
  deadline    DateTime?    @db.Timestamptz(6)
  startedAt   DateTime?    @map("started_at") @db.Timestamptz(6)
  completedAt DateTime?    @map("completed_at") @db.Timestamptz(6)
  createdById String?      @map("created_by") @db.VarChar(255)
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  metadata    Json?

  // Relations
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service    Service? @relation(fields: [serviceId], references: [id])
  team       Team     @relation(fields: [teamId], references: [id])
  assignedUser User?  @relation("TaskAssignedTo", fields: [assignedTo], references: [id])
  createdBy  User?    @relation("TaskCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  @@index([orderId, status])
  @@index([serviceId])
  @@index([teamId, status])
  @@index([assignedTo, status])
  @@index([status, priority])
  @@index([deadline])
  @@index([createdById])
  @@index([createdAt(sort: Desc)])
  @@map("tasks")
}

model AskingTask {
  id                    String          @id @default(cuid())
  orderId               String          @map("order_id")
  serviceId             String          @map("service_id")
  teamId                String          @map("team_id")
  title                 String          @db.VarChar(500)
  description           String?         @db.Text
  assignedTo            String?         @map("assigned_to") @db.VarChar(255)
  isMandatory           Boolean         @default(true) @map("is_mandatory")
  isFlagged             Boolean         @default(false) @map("is_flagged")
  currentStage          AskingStageType @default(ASKED) @map("current_stage")
  priority              TaskPriority    @default(MEDIUM)
  deadline              DateTime?       @db.Timestamptz(6)
  notes                 String?         @db.Text // Completion notes or issue details
  createdAt             DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  completedAt           DateTime?       @map("completed_at") @db.Timestamptz(6)
  metadata              Json?

  // Relations
  order        Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service      Service              @relation(fields: [serviceId], references: [id])
  team         Team                 @relation(fields: [teamId], references: [id])
  assignedUser User?                @relation("AskingTaskAssignedTo", fields: [assignedTo], references: [id])
  stageHistory AskingTaskStage[]

  @@index([orderId, currentStage])
  @@index([serviceId])
  @@index([teamId, currentStage])
  @@index([assignedTo, currentStage])
  @@index([currentStage, priority])
  @@index([deadline])
  @@index([isFlagged])
  @@index([createdAt(sort: Desc)])
  @@map("asking_tasks")
}

model AskingTaskStage {
  id                             String          @id @default(cuid())
  askingTaskId                   String          @map("asking_task_id")
  stage                          AskingStageType
  
  // Initial Confirmation tracking
  initialConfirmationValue       String?         @map("initial_confirmation_value") @db.VarChar(50) // 'Yes' or 'No'
  initialConfirmationUpdatedBy   String?         @map("initial_confirmation_updated_by") @db.VarChar(255) // User ID
  initialConfirmationUpdatedAt   DateTime?       @map("initial_confirmation_updated_at") @db.Timestamptz(6)
  
  // Update Request tracking
  updateRequestValue             String?         @map("update_request_value") @db.VarChar(100) // 'Not Required', 'Asked Changes', 'Approved', 'Reshared waiting for approval'
  updateRequestUpdatedBy         String?         @map("update_request_updated_by") @db.VarChar(255) // User ID
  updateRequestUpdatedAt         DateTime?       @map("update_request_updated_at") @db.Timestamptz(6)
  
  createdAt                      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                      DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  askingTask                     AskingTask @relation(fields: [askingTaskId], references: [id], onDelete: Cascade)
  initialConfirmationUser        User?      @relation("InitialConfirmationUser", fields: [initialConfirmationUpdatedBy], references: [id], onDelete: SetNull)
  updateRequestUser              User?      @relation("UpdateRequestUser", fields: [updateRequestUpdatedBy], references: [id], onDelete: SetNull)

  @@index([askingTaskId, stage])
  @@index([stage])
  @@index([createdAt(sort: Desc)])
  @@map("asking_task_stages")
}

// ============================================
// AUDIT TRAIL
// ============================================

model AuditLog {
  id          String      @id @default(cuid())
  entityType  String      @map("entity_type") @db.VarChar(100) // User, Team, Service, Order, Task, etc.
  entityId    String      @map("entity_id")
  action      AuditAction
  performedBy String      @map("performed_by") @db.VarChar(255)
  oldValue    Json?       @map("old_value")
  newValue    Json?       @map("new_value")
  description String?     @db.Text
  ipAddress   String?     @map("ip_address") @db.VarChar(45)
  userAgent   String?     @map("user_agent") @db.Text
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [performedBy], references: [id])

  @@index([entityType, entityId])
  @@index([performedBy])
  @@index([action])
  @@index([createdAt(sort: Desc)])
  @@map("audit_logs")
}